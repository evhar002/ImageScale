{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
\f3\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue109;\red82\green0\blue103;\red15\green112\blue3;
\red0\green0\blue254;\red109\green111\blue5;\red109\green109\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c42745;\csgenericrgb\c32157\c0\c40392;\csgenericrgb\c5882\c43922\c1176;
\csgenericrgb\c0\c0\c99608;\csgenericrgb\c42745\c43529\c1961;\csgenericrgb\c42745\c42745\c42745;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\b\fs24 \cf2 package 
\f1\b0 \cf0 com.gungoren.imageprocessing.view;\
\

\f0\b \cf2 import 
\f1\b0 \cf0 android.content.Context;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.graphics.Bitmap;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.graphics.Canvas;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.graphics.Color;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.graphics.Paint;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.graphics.Rect;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.util.Log;\

\f0\b \cf2 import 
\f1\b0 \cf0 android.view.View;\
\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.ArrayList;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.HashMap;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.List;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.Map;\

\f0\b \cf2 import 
\f1\b0 \cf0 java.util.Random;\
\
\

\f0\b \cf2 public class 
\f1\b0 \cf0 ImageView 
\f0\b \cf2 extends 
\f1\b0 \cf0 View\
\{\
    
\f0\b \cf2 private static final 
\f1\b0 \cf0 String 
\f2\i\b \cf3 TAG 
\f1\i0\b0 \cf0 = ImageView.
\f0\b \cf2 class
\f1\b0 \cf0 .getSimpleName();\
    
\f0\b \cf2 private 
\f1\b0 \cf0 List<Character> 
\f0\b \cf3 characterList 
\f1\b0 \cf0 = 
\f0\b \cf2 new 
\f1\b0 \cf0 ArrayList<>();\
\
    
\f0\b \cf2 private 
\f1\b0 \cf0 String 
\f0\b \cf3 text 
\f1\b0 \cf0 = 
\f0\b \cf4 "A"
\f1\b0 \cf0 ;\
    
\f0\b \cf2 private int \cf3 size 
\f1\b0 \cf0 = \cf5 1080\cf0 ;\
    
\f0\b \cf2 private int \cf3 pieceWidth 
\f1\b0 \cf0 = \cf5 100\cf0 , 
\f0\b \cf3 pieceHeight 
\f1\b0 \cf0 = \cf5 100\cf0 ;\
    
\f0\b \cf2 private 
\f1\b0 \cf0 Bitmap 
\f0\b \cf3 bitmap
\f1\b0 \cf0 ;\
\
    
\f0\b \cf2 public 
\f1\b0 \cf0 ImageView(Context context) \{\
        
\f0\b \cf2 super
\f1\b0 \cf0 (context);\
        setBackgroundColor(Color.
\f2\i\b \cf3 YELLOW
\f1\i0\b0 \cf0 );\
\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < \cf5 6\cf0 ; i++) \{\
            
\f0\b \cf3 characterList
\f1\b0 \cf0 .add((
\f0\b \cf2 char
\f1\b0 \cf0 )(\cf5 49 \cf0 + i));\
        \}\
\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < \cf5 26\cf0 ; i++) \{\
            
\f0\b \cf3 characterList
\f1\b0 \cf0 .add((
\f0\b \cf2 char
\f1\b0 \cf0 )(\cf5 65 \cf0 + i));\
        \}\
\
        
\f0\b \cf3 bitmap 
\f1\b0 \cf0 = Bitmap.
\f3\i createBitmap
\f1\i0 (
\f0\b \cf3 size
\f1\b0 \cf0 , 
\f0\b \cf3 size
\f1\b0 \cf0 , Bitmap.Config.
\f2\i\b \cf3 ARGB_8888
\f1\i0\b0 \cf0 );\
        Map<Character, Bitmap> map = 
\f0\b \cf2 new 
\f1\b0 \cf0 HashMap<Character, Bitmap>();\
        Random random = 
\f0\b \cf2 new 
\f1\b0 \cf0 Random();\
        Canvas canvas = 
\f0\b \cf2 new 
\f1\b0 \cf0 Canvas(
\f0\b \cf3 bitmap
\f1\b0 \cf0 );\
        
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 i = \cf5 0\cf0 ; i < 
\f0\b \cf3 size 
\f1\b0 \cf0 / 
\f0\b \cf3 pieceWidth
\f1\b0 \cf0 ; i++)\{\
            
\f0\b \cf2 for 
\f1\b0 \cf0 (
\f0\b \cf2 int 
\f1\b0 \cf0 j = \cf5 0\cf0 ; j < 
\f0\b \cf3 size 
\f1\b0 \cf0 / 
\f0\b \cf3 pieceHeight
\f1\b0 \cf0 ; j++) \{\
                Character character = 
\f0\b \cf3 characterList
\f1\b0 \cf0 .get(random.nextInt(\cf5 32\cf0 ));\
                Bitmap bmp = map.get(character);\
                
\f0\b \cf2 if 
\f1\b0 \cf0 (bmp == 
\f0\b \cf2 null
\f1\b0 \cf0 )\{\
                    bmp = test(character.toString());\
                    map.put(character, bmp);\
                \}\
                canvas.drawBitmap(bmp, i * 
\f0\b \cf3 pieceWidth
\f1\b0 \cf0 , j * 
\f0\b \cf3 pieceHeight
\f1\b0 \cf0 , 
\f0\b \cf2 null
\f1\b0 \cf0 );\
            \}\
        \}\
    \}\
\
    \cf6 @Override\
    
\f0\b \cf2 protected void 
\f1\b0 \cf0 onMeasure(
\f0\b \cf2 int 
\f1\b0 \cf0 widthMeasureSpec, 
\f0\b \cf2 int 
\f1\b0 \cf0 heightMeasureSpec) \{\
        
\f0\b \cf2 super
\f1\b0 \cf0 .onMeasure(widthMeasureSpec, heightMeasureSpec);\
        
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 size 
\f1\b0 \cf0 = widthMeasureSpec;\
    \}\
\
    \cf6 @Override\
    
\f0\b \cf2 protected void 
\f1\b0 \cf0 onDraw(Canvas canvas) \{\
        canvas.drawBitmap(
\f0\b \cf3 bitmap
\f1\b0 \cf0 , \cf5 0\cf0 , \cf5 0\cf0 , 
\f0\b \cf2 null
\f1\b0 \cf0 );\
    \}\
\
    
\f0\b \cf2 private 
\f1\b0 \cf0 Bitmap test(String text)\{\
        Bitmap pieceBitmap = Bitmap.
\f3\i createBitmap
\f1\i0 (
\f0\b \cf3 pieceWidth
\f1\b0 \cf0 , 
\f0\b \cf3 pieceHeight
\f1\b0 \cf0 , Bitmap.Config.
\f2\i\b \cf3 ARGB_8888
\f1\i0\b0 \cf0 );\
        Canvas canvas = 
\f0\b \cf2 new 
\f1\b0 \cf0 Canvas(pieceBitmap);\
        Paint paint = 
\f0\b \cf2 new 
\f1\b0 \cf0 Paint(Paint.
\f2\i\b \cf3 ANTI_ALIAS_FLAG
\f1\i0\b0 \cf0 );\
        
\f0\b \cf2 final float 
\f1\b0 \cf0 textSize = \cf5 48f\cf0 ;\
        
\f3\i \cf7 // Adjust text size to fill rect\
        
\f1\i0 \cf0 paint.setTextSize(textSize);\
        paint.setTextScaleX(\cf5 1.0f\cf0 );\
        
\f3\i \cf7 // ask the paint for the bounding rect if it were to draw this text\
        
\f1\i0 \cf0 Rect bounds = 
\f0\b \cf2 new 
\f1\b0 \cf0 Rect();\
        paint.getTextBounds(text, \cf5 0\cf0 , text.length(), bounds);\
        
\f3\i \cf7 // get the height that would have been produced\
        
\f0\i0\b \cf2 int 
\f1\b0 \cf0 h = bounds.
\f0\b \cf3 bottom 
\f1\b0 \cf0 - bounds.
\f0\b \cf3 top
\f1\b0 \cf0 ;\
        
\f3\i \cf7 // figure out what textSize setting would create that height of text\
        
\f0\i0\b \cf2 float 
\f1\b0 \cf0 size = (((
\f0\b \cf2 float
\f1\b0 \cf0 )(pieceBitmap.getHeight())/h) * textSize);\
        
\f3\i \cf7 // and set it into the paint\
        
\f1\i0 \cf0 paint.setTextSize(size);\
        
\f3\i \cf7 // Now set the scale.\
        // do calculation with scale of 1.0 (no scale)\
        
\f1\i0 \cf0 paint.setTextScaleX(\cf5 1.0f\cf0 );\
        
\f3\i \cf7 // ask the paint for the bounding rect if it were to draw this text.\
        
\f1\i0 \cf0 paint.getTextBounds(text, \cf5 0\cf0 , text.length(), bounds);\
        
\f3\i \cf7 // determine the width\
        
\f0\i0\b \cf2 int 
\f1\b0 \cf0 w = bounds.
\f0\b \cf3 right 
\f1\b0 \cf0 - bounds.
\f0\b \cf3 left
\f1\b0 \cf0 ;\
        
\f3\i \cf7 // determine how much to scale the width to fit the view\
        
\f0\i0\b \cf2 float 
\f1\b0 \cf0 xscale = ((
\f0\b \cf2 float
\f1\b0 \cf0 ) (pieceBitmap.getWidth())) / w;\
        
\f3\i \cf7 // set the scale for the text paint\
        
\f1\i0 \cf0 paint.setTextScaleX(xscale);\
\
        canvas.drawText(text, \cf5 0\cf0 , pieceBitmap.getHeight(), paint);\
        
\f0\b \cf2 return 
\f1\b0 \cf0 pieceBitmap;\
    \}\
\
    
\f0\b \cf2 public 
\f1\b0 \cf0 String getText() \{\
        
\f0\b \cf2 return \cf3 text
\f1\b0 \cf0 ;\
    \}\
\
    
\f0\b \cf2 public void 
\f1\b0 \cf0 setText(String text) \{\
        
\f0\b \cf2 this
\f1\b0 \cf0 .
\f0\b \cf3 text 
\f1\b0 \cf0 = text;\
    \}\
\}\
\
}